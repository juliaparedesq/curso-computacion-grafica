# A simple class container to store vertices and indices that define a shape
import basic_shapes as bs

import matplotlib.pyplot as plt
import numpy as np
import matplotlib

CONST_G = 0.06  # 6.67 e-11


"""class Body:
    #Class representing a body

    def __init__(self, name, position, mass, radius):
        self.name = name
        self.position = position
        self.mass = mass
        self.radius = radius

    def get_mass(self):
        return self.mass

    def get_pos(self):
        return self.position

    def get_radius(self):
        return self.radius


# Generating bodies
earth = Body(name='earth', position=(-1., -1., -1.),
             mass=100.0, radius=0.5)
moon = Body(name='moon', position=(1., 1., 1.),
            mass=20.0, radius=0.2)


def V(X, Y, Z, body):
    #Given a point x, y, z, calculates gravitatonial potential.
    m = body.get_mass()
    xb, yb, zb = body.get_pos()

    potential = np.zeros(shape=X.shape)

    # x = X[i] si es que se va al ciclo for.
    for i in range(X.shape[0]):
        for j in range(X.shape[1]):
            for k in range(X.shape[2]):
                x, y, z = X[i, j, k], Y[i, j, k], Z[i, j, k]
                euc_distance = np.sqrt((x - xb) ** 2 + (y - yb) ** 2 + (z - zb) ** 2)

                if euc_distance <= body.radius * 1.1:
                    potential[i, j, k] = 0
                else:
                    potential[i, j, k] = -1 * CONST_G * m / euc_distance

    return potential


# otra forma con linspace, con el Y se recorre el X, para calcular X se tiene X = X_i


X, Y, Z = np.mgrid[-2:2:20j, -2:2:20j, -2:2:20j]
# Considerar: utilizar linspace endpoint=True

# Compute potential for both bodies
V_earth = V(X, Y, Z, earth)
V_moon = V(X, Y, Z, moon)

# Sum it to have the total effect.
V_total = V_earth + V_moon

# Storing our results
np.save('Potentials_earth', V_earth)
np.save('Potentials_moon', V_moon)
np.save('Potentials', V_total)


fig = plt.figure(figsize = (15, 10))
ax = fig.gca(projection='3d')

# Earth in place
ax.scatter(earth.get_pos()[0], earth.get_pos()[1], earth.get_pos()[2], color=(0.3,0.5,0.5), s=500, label="Earth")

# Moon in place
ax.scatter(moon.get_pos()[0], moon.get_pos()[1], moon.get_pos()[2], color=(0.7,0.7,0.7), s=100, label="Moon")

# Gravitational potential field
scat = ax.scatter(X, Y, Z, c=V_total, alpha=0.20, s=50, marker='s', cmap='viridis')

fig.colorbar(scat, shrink=0.5, aspect=5) # This is the colorbar at the side

# Showing the result
ax.set_title('Potential field generated by earth and moon')
ax.set_xlabel('x')
ax.set_ylabel('y')
ax.set_zlabel('z')
ax.legend()

###plt.show()

from matplotlib import cm

fig, ax = plt.subplots()

XX, YY = np.mgrid[-2:2:20j, -2:2:20j]

pcm = ax.pcolor(XX, YY, V_earth[:, :, 10], cmap='viridis')
ax.scatter(earth.get_pos()[0], earth.get_pos()[1], alpha=1.0, s=900,  color=(0.0,0.7,0.7), label='Earth')

#  después puede ser contour para agregarse.
fig.colorbar(pcm, shrink=0.5, aspect=5, label="Potential") # This is the colorbar at the side

# Showing the result
ax.set_xlabel('x')
ax.set_ylabel('y')
ax.legend()

###plt.show()

from matplotlib import cm

fig, ax = plt.subplots()

XX, ZZ = np.mgrid[-2:2:20j, -2:2:20j]

pcm = ax.pcolor(XX, ZZ, V_moon[:, 18, :], cmap='viridis')
ax.scatter(moon.get_pos()[0], moon.get_pos()[2], color=(0.7,0.7,0.7), s=100, label="Moon")

#  después puede ser contour para agregarse.
fig.colorbar(pcm, shrink=0.5, aspect=5, label="Potential") # This is the colorbar at the side

# Showing the result
ax.set_xlabel('x')
ax.set_ylabel('z')
ax.legend()

###plt.show()

from matplotlib import cm

fig, ax = plt.subplots()

YY, ZZ = np.mgrid[-2:2:20j, -2:2:20j]

pcm = ax.pcolor(YY, ZZ, V_total[10, :, :], cmap='viridis')
ax.scatter(earth.get_pos()[1], earth.get_pos()[2], color=(0.7,0.7,0.7), s=100, label="Moon")
ax.scatter(moon.get_pos()[1], moon.get_pos()[2], color=(0.7,0.7,0.7), s=100, label="Moon")

#  después puede ser contour para agregarse.
fig.colorbar(pcm, shrink=0.5, aspect=5, label="Potential") # This is the colorbar at the side

# Showing the result
ax.set_xlabel('y')
ax.set_ylabel('z')
ax.legend()

###plt.show()

# primero verlo de un color, si se usa iluminación con colores, no se ve la forma
# luego colocar colores arbitrarios

# This is not a marching cube, it is a fast and simpler version.
def fast_marching_cube(X, Y, Z, scal_field, isosurface_value):
    dims = X.shape[0]-1, X.shape[1]-1, X.shape[2]-1
    voxels = np.zeros(shape=dims, dtype=bool)
    for i in range(1, X.shape[0]-1):
        for j in range(1, X.shape[1]-1):
            for k in range(1, X.shape[2]-1):
                # Tomamos desde i-1 hasta i+1, porque así analiza hasta el punto i
                # El slicing NO incluye el final.
                v_min = scal_field[i-1:i+1, j-1:j+1, k-1:k+1].min()
                v_max = scal_field[i-1:i+1, j-1:j+1, k-1:k+1].max()

                if v_min < isosurface_value and isosurface_value < v_max:
                    voxels[i,j,k] = True
                else:
                    voxels[i,j,k] = False

    return voxels


voxels = fast_marching_cube(X, Y, Z, V_total, -3.9408383)
print(V_total.shape , X.shape)
# otra forma con linspace

np.save('voxels', voxels)
voxels.shape
fig = plt.figure(figsize = (15, 10))
ax = fig.gca(projection='3d')

# Earth in place
ax.scatter(earth.get_pos()[0], earth.get_pos()[1], earth.get_pos()[2], color=(0.3,0.5,0.5), s=500, label="Earth")

ax.voxels(X, Y, Z, voxels)

# Moon in place
ax.scatter(moon.get_pos()[0], moon.get_pos()[1], moon.get_pos()[2], color=(0.7,0.7,0.7), s=100, label="Moon")


# fig.colorbar(scat, shrink=0.5, aspect=5) # This is the colorbar at the side

# Showing the result
ax.set_title('Potential field generated by earth and moon')
ax.set_xlabel('x')
ax.set_ylabel('y')
ax.set_zlabel('z')
ax.legend()

###plt.show()

fig = plt.figure(figsize = (15, 10))
ax = fig.gca(projection='3d')

# Earth in place
ax.scatter(earth.get_pos()[0], earth.get_pos()[1], earth.get_pos()[2], color=(0.3,0.5,0.5), s=500, label="Earth")

ax.voxels(X, Y, Z, voxels, edgecolor='k')

# Moon in place
ax.scatter(moon.get_pos()[0], moon.get_pos()[1], moon.get_pos()[2], color=(0.7,0.7,0.7), s=100, label="Moon")


# fig.colorbar(scat, shrink=0.5, aspect=5) # This is the colorbar at the side

# Showing the result
ax.set_title('Potential field generated by earth and moon. Now with edgecolor=k')
ax.set_xlabel('x')
ax.set_ylabel('y')
ax.set_zlabel('z')
ax.legend()

###plt.show()

fig = plt.figure(figsize=(15, 10))
ax = fig.gca(projection='3d')

# Earth in place
ax.scatter(earth.get_pos()[0], earth.get_pos()[1], earth.get_pos()[2], color=(0.3, 0.5, 0.5), s=500, label="Earth")

# colors = np.random.random()
for i in range(1, X.shape[0] - 1):
    for j in range(1, X.shape[1] - 1):
        for k in range(1, X.shape[2] - 1):

            if voxels[i, j, k]:
                x, y, z = X[i, j, k], Y[i, j, k], Z[i, j, k]
                ax.scatter(x, y, z, color=np.random.rand(3, ), marker='s', s=100, alpha=0.2)

# Moon in place
ax.scatter(moon.get_pos()[0], moon.get_pos()[1], moon.get_pos()[2], color=(0.7, 0.7, 0.7), s=100, label="Moon")

# Showing the result
ax.set_title('Potential field generated by earth and moon')
ax.set_xlabel('x')
ax.set_ylabel('y')
ax.set_zlabel('z')
ax.legend()
###plt.show()

def createColorCube(i, j, k, X, Y, Z):
    l_x = X[i, j, k] #X[i]
    r_x = X[i + 1, j, k] # X[i+1]
    b_y = Y[i, j, k]   #Y[i]
    f_y = Y[i, j + 1, k]   #Y[i+1]
    b_z = Z[i, j, k]    #Z[0]
    t_z = Z[i, j, k + 1]    #Z[1]
    c = np.random.rand
    #   positions    colors
    vertices = [
        # Z+: number 1
        l_x, b_y, t_z, c(), c(), c(),
        r_x, b_y, t_z, c(), c(), c(),
        r_x, f_y, t_z, c(), c(), c(),
        l_x, f_y, t_z, c(), c(), c(),
        # Z-: number 6
        l_x, b_y, b_z, 0, 0, 0,
        r_x, b_y, b_z, 1, 1, 1,
        r_x, f_y, b_z, 0, 0, 0,
        l_x, f_y, b_z, 1, 1, 1,
        # X+: number 5
        r_x, b_y, b_z, 0, 0, 0,
        r_x, f_y, b_z, 1, 1, 1,
        r_x, f_y, t_z, 0, 0, 0,
        r_x, b_y, t_z, 1, 1, 1,
        # X-: number 2
        l_x, b_y, b_z, 0, 0, 0,
        l_x, f_y, b_z, 1, 1, 1,
        l_x, f_y, t_z, 0, 0, 0,
        l_x, b_y, t_z, 1, 1, 1,
        # Y+: number 4
        l_x, f_y, b_z, 0, 0, 0,
        r_x, f_y, b_z, 1, 1, 1,
        r_x, f_y, t_z, 0, 0, 0,
        l_x, f_y, t_z, 1, 1, 1,
        # Y-: number 3
        l_x, b_y, b_z, 0, 0, 0,
        r_x, b_y, b_z, 1, 1, 1,
        r_x, b_y, t_z, 0, 0, 0,
        l_x, b_y, t_z, 1, 1, 1,
    ]

    # Defining connections among vertices
    # We have a triangle every 3 indices specified
    indices = [
        0, 1, 2, 2, 3, 0,
        4, 5, 6, 6, 7, 4,
        4, 5, 1, 1, 0, 4,
        6, 7, 3, 3, 2, 6,
        5, 6, 2, 2, 1, 5,
        7, 4, 0, 0, 3, 7]

    return bs.Shape(vertices, indices)


def merge(destinationShape, strideSize, sourceShape):
    # current vertices are an offset for indices refering to vertices of the new shape
    offset = len(destinationShape.vertices)
    destinationShape.vertices += sourceShape.vertices
    destinationShape.indices += [(offset / strideSize) + index for index in sourceShape.indices]


# coding=utf-8
import glfw
from OpenGL.GL import *
import OpenGL.GL.shaders
import numpy as np
import sys

import transformations as tr
import easy_shaders as es
import basic_shapes as bs

PROJECTION_ORTHOGRAPHIC = 0
PROJECTION_FRUSTUM = 1
PROJECTION_PERSPECTIVE = 2


# A class to store the application control
class Controller:
    def __init__(self):
        self.fillPolygon = True
        self.projection = PROJECTION_ORTHOGRAPHIC


# We will use the global controller as communication with the callback function
controller = Controller()


def on_key(window, key, scancode, action, mods):
    if action != glfw.PRESS:
        return

    global controller

    if key == glfw.KEY_SPACE:
        controller.fillPolygon = not controller.fillPolygon

    elif key == glfw.KEY_1:
        print('Orthographic projection')
        controller.projection = PROJECTION_ORTHOGRAPHIC

    elif key == glfw.KEY_2:
        print('Frustum projection')
        controller.projection = PROJECTION_FRUSTUM

    elif key == glfw.KEY_3:
        print('Perspective projection')
        controller.projection = PROJECTION_PERSPECTIVE

    elif key == glfw.KEY_ESCAPE:
        glfw.set_window_should_close(window, True)


if __name__ == "__main__":

    # Initialize glfw
    if not glfw.init():
        sys.exit()

    width = 600
    height = 600

    window = glfw.create_window(width, height, "Projections Demo", None, None)

    if not window:
        glfw.terminate()
        sys.exit()

    glfw.make_context_current(window)

    # Connecting the callback function 'on_key' to handle keyboard events
    glfw.set_key_callback(window, on_key)

    # Assembling the shader program
    pipeline = es.SimpleModelViewProjectionShaderProgram()

    # Telling OpenGL to use our shader program
    glUseProgram(pipeline.shaderProgram)

    # Setting up the clear screen color
    glClearColor(0.15, 0.15, 0.15, 1.0)

    # As we work in 3D, we need to check which part is in front,
    # and which one is at the back
    glEnable(GL_DEPTH_TEST)

    # Creating shapes on GPU memory
    gpuAxis = es.toGPUShape(bs.createAxis(7))

    # Load potentials and grid
    load_voxels = np.load('voxels.npy')

    X, Y, Z = np.mgrid[-2:2:20j, -2:2:20j, -2:2:20j]
    #print(load_voxels.shape, X.shape)

    isosurface = bs.Shape([], [])
    # Now let's draw voxels!
    for i in range(X.shape[0] - 1):
        for j in range(X.shape[1] - 1):
            for k in range(X.shape[2] - 1):
                # print(X[i,j,k])
                if load_voxels[i, j, k]: #si es True
                    temp_shape = createColorCube(i, j, k, X, Y, Z)
                    merge(destinationShape=isosurface, strideSize=6, sourceShape=temp_shape)

    gpu_surface = es.toGPUShape(isosurface)

    t0 = glfw.get_time()
    camera_theta = np.pi / 4

    while not glfw.window_should_close(window):
        # Using GLFW to check for input events
        glfw.poll_events()

        # Getting the time difference from the previous iteration
        t1 = glfw.get_time()
        dt = t1 - t0
        t0 = t1

        if (glfw.get_key(window, glfw.KEY_LEFT) == glfw.PRESS):
            camera_theta -= 2 * dt

        if (glfw.get_key(window, glfw.KEY_RIGHT) == glfw.PRESS):
            camera_theta += 2 * dt

        # Setting up the view transform

        camX = 10 * np.sin(camera_theta)
        camY = 10 * np.cos(camera_theta)

        viewPos = np.array([camX, camY, 10])

        view = tr.lookAt(
            viewPos,
            np.array([0, 0, 0]),
            np.array([0, 0, 1])
        )

        glUniformMatrix4fv(glGetUniformLocation(pipeline.shaderProgram, "view"), 1, GL_TRUE, view)

        # Setting up the projection transform

        if controller.projection == PROJECTION_ORTHOGRAPHIC:
            projection = tr.ortho(-8, 8, -8, 8, 0.1, 100)

        elif controller.projection == PROJECTION_FRUSTUM:
            projection = tr.frustum(-5, 5, -5, 5, 9, 100)

        elif controller.projection == PROJECTION_PERSPECTIVE:
            projection = tr.perspective(60, float(width) / float(height), 0.1, 100)

        else:
            raise Exception()

        glUniformMatrix4fv(glGetUniformLocation(pipeline.shaderProgram, "projection"), 1, GL_TRUE, projection)

        # Clearing the screen in both, color and depth
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)

        # Filling or not the shapes depending on the controller state
        if (controller.fillPolygon):
            glPolygonMode(GL_FRONT_AND_BACK, GL_FILL)
        else:
            glPolygonMode(GL_FRONT_AND_BACK, GL_LINE)

        # Drawing shapes with different model transformations
        glUniformMatrix4fv(glGetUniformLocation(pipeline.shaderProgram, "model"), 1, GL_TRUE, tr.translate(5, 0, 0))

        glUniformMatrix4fv(glGetUniformLocation(pipeline.shaderProgram, "model"), 1, GL_TRUE, tr.uniformScale(3))
        ###pipeline.drawShape(gpuAxis, GL_LINES)
        ###pipeline.drawShape(gpu_surface)

        # Once the drawing is rendered, buffers are swap so an uncomplete drawing is never seen.
        glfw.swap_buffers(window)

    glfw.terminate()"""

##################### P2 ##################################

import matplotlib.pyplot as plt
import numpy as np
import matplotlib

CONST_G = 0.06  # 6.67 e-11


class Body2D:
    #Class representing a body

    def __init__(self, name, position, mass, radius):
        self.name = name
        self.position = position
        self.mass = mass
        self.radius = radius

    def get_mass(self):
        return self.mass

    def get_pos(self):
        return self.position

    def get_radius(self):
        return self.radius


# Generating bodies
earth = Body2D(name='earth', position=(0., 0.),
               mass=8.0, radius=0.3)
moon = Body2D(name='moon', position=(0.6, 0.6),
              mass=0.9, radius=0.09)


def V(X, Y, body):
    #Given a point x, y, calculate gravitatonial potential.
    m = body.get_mass()
    xb, yb = body.get_pos()

    potential = np.zeros(shape=X.shape)
    for i in range(X.shape[0]):
        for j in range(X.shape[1]):
            x, y = X[i, j], Y[i, j]
            euc_distance = np.sqrt((x - xb) ** 2 + (y - yb) ** 2)

            if euc_distance <= body.radius * 1.1:
                potential[i, j] = 0
            else:
                potential[i, j] = -1 * CONST_G * m / euc_distance

    return potential
XX, YY = np.mgrid[-2:2:7j, -2:2:7j]
# Parte 1
X, Y = np.mgrid[-1:1:50j , -1:1:50j]

#xgrad = np.gradient(X)
#ygrad = np.gradient(Y)

# Compute potential
pot_earth = V(X, Y, earth) #matriz
pot_moon = V(X, Y, moon)
total_pot = pot_earth + pot_moon

def calculate_gradient_forward(V, hx=0.5, hy=0.5):
    dx = np.zeros(shape=V.shape)
    dy = np.zeros(shape=V.shape)
    for i in range(1, V.shape[0]-1):
        for j in range(1, V.shape[1]-1):
            # Filtering results where potetial is zero, so we have a better result
            if V[i, j] and V[i+1, j] and V[i+1, j+1] and V[i, j+1] and V[i-1, j+1] and V[i-1, j] and V[i-1, j-1] and V[i, j-1] and V[i+1, j-1] :
                dx[i, j] = V[i+1, j] - V[i, j]
                dy[i, j] = V[i, j+1] - V[i, j]

    # Explodes in points where the other part is zero
    dx = dx / hx
    dy = dy / hy

    return dx, dy
# Compute gradients
dx_earth, dy_earth = calculate_gradient_forward(pot_earth)
dx_earth, dy_earth = np.gradient(pot_earth)
#print(dx_earth)
dx_moon, dy_moon = calculate_gradient_forward(pot_moon)
print(dx_moon[36,42], dy_moon[36,42], 'otra', dx_moon[35,45], dy_moon[35,45], 'otra', dx_moon[38,25], dy_moon[38,25]  )
#print(dx_moon[38,35], dy_moon[38,35], 'otra', dx_moon[39,35], dy_moon[39,35])
#print(dx_moon[25,48], dy_moon[25,48], 'otra', dx_moon[48,25], dy_moon[48,25])
#dx_moon, dy_moon = np.gradient(pot_moon)


dx_total = dx_earth + dx_moon
dy_total = dy_earth + dy_moon

# We still have to change some values to 0, where is inside of the earth or the sun
dx_total[np.where(dx_earth == 0)] = 0
dy_total[np.where(dy_earth == 0)] = 0

dx_total[np.where(dx_moon == 0)] = 0
dy_total[np.where(dy_moon == 0)] = 0

# Store arrays
np.save('pt2_pot_earth', pot_earth)
np.save('pt2_pot_earth_dx', dx_earth)
np.save('pt2_pot_earth_dy', dy_earth)

np.save('pt2_pot_moon', pot_moon)
np.save('pt2_pot_moon_dx', dx_moon)
np.save('pt2_pot_moon_dy', dy_moon)
#Pt.3 Plotting results with quiver earth
fig, ax = plt.subplots(figsize = (15, 10))
# Show earth
#earth_visualization = ax.scatter(earth.get_pos()[0], earth.get_pos()[1], color=(0,0.5,0.5), s=earth.get_radius()*1e5, label="Earth")
# Show quiver
Q = ax.quiver(X, Y, dx_moon, dy_moon)
#print(Y.shape, dy_earth.shape)
ax.set_title('Quiver using forward gradient')
#ax.legend()
ax.set_xlabel('x')
ax.set_ylabel('y')
plt.show()